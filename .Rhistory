M_temp = pcv[[n]][[2]][!sapply(
1:nrow(pcv[[n]][[2]]),function(x) TRUE %in% is.na(pcv[[n]][[2]])[x,]),]
ConsClust[[n]] = ConsensusClusterPlus::ConsensusClusterPlus(
sweep(M_temp,1,apply(M_temp,1,median,na.rm=T)),maxK=6,reps=input$nperm,
pItem=0.8,pFeature=0.5, clusterAlg="hc",distance="pearson",
seed=1262118388.71279,plot=NULL, verbose=FALSE)
}
names(ConsClust) = names(v)
for(n in 1:length(v)){
for(k in 2:6){
rownames(ConsClust[[n]][[k]]$ml) = rs_names
colnames(ConsClust[[n]][[k]]$ml) = rs_names
}
}
rs_names
ConsClust
pc_cat <- c("De_novo_Start_InFrame", "De_novo_Start_OutOfFrame",
"Frame_Shift_Del", "Frame_Shift_Ins",
"Missense_Mutation","Nonsense_Mutation","Splice_Site",
"Start_Codon_SNP")
#create list only containing protein changing variants (pcv)
pcv <- vector("list",length(v))
for (i in 1:length(v)){
pcv[[i]] <- v[[i]][v[[i]]$Variant_Classification %in% pc_cat,]
}
names(pcv) <- names(v)
if(0 %in% sapply(pcv,nrow)){
stop("At least one oncotator input file has no protein coding variants.")
}
v
rs_names <- colnames(pcv[[1]])[grep("rankscore",colnames(pcv[[1]]))]
rs_names <- gsub("dbNSFP_",replacement = "",rs_names)
rs_names = gsub("_rankscore",replacement = "",rs_names)
suppressWarnings(
for(n in 1:length(pcv)){
rs_matrix = matrix(NA,nrow(pcv[[n]]),length(rs_names))
for (i in 1:length(rs_names)){
rs = strsplit(pcv[[n]][,grep("rankscore",colnames(v[[1]]))[i]], "[|]")
rs = as.numeric(sapply(rs,"[", i=1))
rs_matrix[,i] = rs
}
pcv[[n]][[2]] = rs_matrix
pcv[[n]][[3]] = apply(apply(pcv[[n]][[2]],1,is.na),2,sum)
colnames(pcv[[n]][[2]]) = rs_names
}
)
hmcol <- rev(colorRampPalette(RColorBrewer::brewer.pal(10, "RdBu"))(256))
palette_breaks <- seq(0,1,length.out = 257)
paste("Total number of variants:", nrow(v[[input$sample]]))
ggplot2::ggplot(v[[input$sample]], ggplot2::aes(x=Variant_Type)) +
ggplot2::geom_bar(stat="count") + ggplot2::xlab("") +
ggplot2::theme_bw() + ggplot2::ylab("count")
})
output$variantclass <- renderPlot({
var_col = as.vector(v[[input$sample]]$Variant_Classification)
var_col[var_col %in% pc_cat] = "protein changing"
var_col[!var_col =="protein changing"] = "other"
df = as.data.frame(cbind(v[[input$sample]], var_col))
ggplot2::ggplot(df, ggplot2::aes(x=Variant_Classification, fill=var_col)) +
ggplot2::geom_bar(stat="count") + ggplot2::coord_flip() +
ggplot2::xlab("") + ggplot2::theme_bw() +
ggplot2::guides(fill=ggplot2::guide_legend(reverse=TRUE)) +
ggplot2::scale_fill_manual(values = c("gold1","blue")) +
ggplot2::labs(fill="Variant classification")
var_col = as.vector(v[[input$sample]]$Variant_Classification)
var_col[var_col %in% pc_cat] = "protein changing"
var_col[!var_col =="protein changing"] = "other"
df = as.data.frame(cbind(v[[input$sample]], var_col))
ggplot2::ggplot(df, ggplot2::aes(x=Variant_Classification, fill=var_col)) +
ggplot2::geom_bar(stat="count") + ggplot2::coord_flip() +
ggplot2::xlab("") + ggplot2::theme_bw() +
ggplot2::guides(fill=ggplot2::guide_legend(reverse=TRUE)) +
ggplot2::scale_fill_manual(values = c("gold1","blue")) +
ggplot2::labs(fill="Variant classification")
paste("Protein changing single-nucleotide variants:",
sum(pcv[[input$sample]][[3]]<18))
ConsClust = vector("list",length(v))
for (n in 1:length(v)){
M_temp = pcv[[n]][[2]][!sapply(
1:nrow(pcv[[n]][[2]]),function(x) TRUE %in% is.na(pcv[[n]][[2]])[x,]),]
ConsClust[[n]] = ConsensusClusterPlus::ConsensusClusterPlus(
sweep(M_temp,1,apply(M_temp,1,median,na.rm=T)),maxK=6,reps=input$nperm,
pItem=0.8,pFeature=0.5, clusterAlg="hc",distance="pearson",
seed=1262118388.71279,plot=NULL, verbose=FALSE)
}
input$nperm
input$nperm = 20
ConsClust = vector("list",length(v))
for (n in 1:length(v)){
M_temp = pcv[[n]][[2]][!sapply(
1:nrow(pcv[[n]][[2]]),function(x) TRUE %in% is.na(pcv[[n]][[2]])[x,]),]
ConsClust[[n]] = ConsensusClusterPlus::ConsensusClusterPlus(
sweep(M_temp,1,apply(M_temp,1,median,na.rm=T)),maxK=6,reps=input$nperm,
pItem=0.8,pFeature=0.5, clusterAlg="hc",distance="pearson",
seed=1262118388.71279,plot=NULL, verbose=FALSE)
}
names(ConsClust) = names(v)
for(n in 1:length(v)){
for(k in 2:6){
rownames(ConsClust[[n]][[k]]$ml) = rs_names
colnames(ConsClust[[n]][[k]]$ml) = rs_names
}
}
df = as.data.frame(t(pcv[[input$sample]][[2]]),stringsAsFactors = FALSE)
centroid = t(plyr::ddply(df, plyr::.(ConsClust[[input$sample]][[as.numeric(
input$pred_modules)]]$consensusClass), plyr::colwise(mean, na.rm = TRUE)))
colnames(centroid) = paste0("module",1:ncol(centroid))
centroid = centroid[2:nrow(centroid),]
centroid = apply(centroid,2,as.numeric)
cutoff = 0.75
comb_score = as.vector(apply(centroid*(centroid>cutoff*1),1,
function(x) sum(x,na.rm=TRUE)))
comb_score
df = as.data.frame(t(pcv[[input$sample]][[2]]),stringsAsFactors = FALSE)
centroid = t(plyr::ddply(df, plyr::.(ConsClust[[input$sample]][[as.numeric(
input$pred_modules)]]$consensusClass), plyr::colwise(mean, na.rm = TRUE)))
input$pred_modules = 4
df = as.data.frame(t(pcv[[input$sample]][[2]]),stringsAsFactors = FALSE)
centroid = t(plyr::ddply(df, plyr::.(ConsClust[[input$sample]][[as.numeric(
input$pred_modules)]]$consensusClass), plyr::colwise(mean, na.rm = TRUE)))
colnames(centroid) = paste0("module",1:ncol(centroid))
centroid = centroid[2:nrow(centroid),]
centroid = apply(centroid,2,as.numeric)
cutoff = 0.75
comb_score = as.vector(apply(centroid*(centroid>cutoff*1),1,
function(x) sum(x,na.rm=TRUE)))
comb_score
updateSliderInput(session, inputId = "comb_score",
value = 0, min = 0, max =x,step = 0.1)
f = (comb_score>=input$comb_score)*1 #keep if higher than comb.score cutoff
f[pcv[[input$sample]][[3]]==18] = 0 #exclude variants with missing rankscores
if (1 %in% input$db){ #if selection 1 - exclude all 1000 Genomes variants
f[pcv[[input$sample]]$X1000gp3_AF>0] = 0
}
if (2 %in% input$db){ #keep all overlapping mutations in COSMIC if selected
f[pcv[[input$sample]]$COSMIC_n_overlapping_mutations>0] =1
}
if (3 %in% input$db){ #keep all non-SNVs
nonSNVs = pcv[[input$sample]]$Variant_Type
f[!nonSNVs=="SNP"] =1
}
if (4 %in% input$db){ #keep all DNA repair gene variants
repair = pcv[[input$sample]]$DNARepairGenes_Role
repair[repair==""] = NA
is.repair = !is.na(repair)
f[is.repair] =1
}
sel_genes = unique(pcv[[input$sample]]$Hugo_Symbol)
gene_rescue = unlist(strsplit(input$rescue,", "))
gene_rescue_intersect = sel_genes[sel_genes %in% gene_rescue]
f[pcv[[input$sample]]$Hugo_Symbol %in% gene_rescue_intersect] =1
f = f==1
f
f = (comb_score>=input$comb_score)*1 #keep if higher than comb.score cutoff
f[pcv[[input$sample]][[3]]==18] = 0 #exclude variants with missing rankscores
if (1 %in% input$db){ #if selection 1 - exclude all 1000 Genomes variants
f[pcv[[input$sample]]$X1000gp3_AF>0] = 0
}
if (2 %in% input$db){ #keep all overlapping mutations in COSMIC if selected
f[pcv[[input$sample]]$COSMIC_n_overlapping_mutations>0] =1
}
if (3 %in% input$db){ #keep all non-SNVs
nonSNVs = pcv[[input$sample]]$Variant_Type
f[!nonSNVs=="SNP"] =1
}
if (4 %in% input$db){ #keep all DNA repair gene variants
repair = pcv[[input$sample]]$DNARepairGenes_Role
repair[repair==""] = NA
is.repair = !is.na(repair)
f[is.repair] =1
}
sel_genes = unique(pcv[[input$sample]]$Hugo_Symbol)
gene_rescue = unlist(strsplit(input$rescue,", "))
gene_rescue_intersect = sel_genes[sel_genes %in% gene_rescue]
f[pcv[[input$sample]]$Hugo_Symbol %in% gene_rescue_intersect] =1
f = f==1
f
f = (comb_score>=input$comb_score)*1 #keep if higher than comb.score cutoff
f
df = as.data.frame(t(pcv[[input$sample]][[2]]),stringsAsFactors = FALSE)
centroid = t(plyr::ddply(df, plyr::.(ConsClust[[input$sample]][[as.numeric(
input$pred_modules)]]$consensusClass), plyr::colwise(mean, na.rm = TRUE)))
colnames(centroid) = paste0("module",1:ncol(centroid))
centroid = centroid[2:nrow(centroid),]
centroid = apply(centroid,2,as.numeric)
cutoff = 0.75
comb_score = as.vector(apply(centroid*(centroid>cutoff*1),1,
function(x) sum(x,na.rm=TRUE)))
comb_score
comb_score
f = (comb_score>=input$comb_score)*1 #keep if higher than comb.score cutoff
f
input$comb_score = 2
f = (comb_score>=input$comb_score)*1 #keep if higher than comb.score cutoff
f[pcv[[input$sample]][[3]]==18] = 0 #exclude variants with missing rankscores
if (1 %in% input$db){ #if selection 1 - exclude all 1000 Genomes variants
f[pcv[[input$sample]]$X1000gp3_AF>0] = 0
}
if (2 %in% input$db){ #keep all overlapping mutations in COSMIC if selected
f[pcv[[input$sample]]$COSMIC_n_overlapping_mutations>0] =1
}
if (3 %in% input$db){ #keep all non-SNVs
nonSNVs = pcv[[input$sample]]$Variant_Type
f[!nonSNVs=="SNP"] =1
}
if (4 %in% input$db){ #keep all DNA repair gene variants
repair = pcv[[input$sample]]$DNARepairGenes_Role
repair[repair==""] = NA
is.repair = !is.na(repair)
f[is.repair] =1
}
sel_genes = unique(pcv[[input$sample]]$Hugo_Symbol)
gene_rescue = unlist(strsplit(input$rescue,", "))
gene_rescue_intersect = sel_genes[sel_genes %in% gene_rescue]
f[pcv[[input$sample]]$Hugo_Symbol %in% gene_rescue_intersect] =1
f = f==1
f
topgenes=pcv[[input$sample]]$Hugo_Symbol[f]
paste("Number of prioritized variants in top 5000 mad genes:",sum(topgenes %in% genes_WGCNA), "out of ",length(topgenes %in% genes_WGCNA))
selection = genes_WGCNA %in% topgenes
topgenes_per_module = as.data.frame(table(modules,selection))$Freq[43:84]
topgenes_per_module
METree_GO = METree.GO
METree_GO$labels[24] = "regulation of transmembrane receptor serine"
METree_GO$labels[27] = "homophilic cell adhesion"
METree_GO$labels[30] = "positive reg. of cytosolic calcium concentration"
par(mfrow=c(1,2))
par(mar=c(8,0,0,0))
a = ape::plot.phylo(ape::as.phylo(METree_GO), font=1, cex=0.90)
plot(0.5,1, xlim=c(0,10),ylim=c(1,42),axes=FALSE, xlab="")
text(x=0, y=c(1:42), labels  = c(0:41)[label.order][METree_GO$order], xpd=TRUE)
mtext("module number", las=2, side=1, at=0)
points(rep(0.5,42),c(1:42),xpd=TRUE,pch=15, cex=1.8, col=c(WGCNA::labels2colors(c(0:41)))[label.order][METree_GO$order])
label.order
label_order = label.order
row.names(t(expmat2))
rm(expmat2)
GS_lscore = GS.lscore
GS_pmet = GS.pmet
GS_survival = GS_survival
GS_survival = GS.survival
GS_UV = GS.UV
GS_Vem = GS.Vem
rm(GS.lscore)
rm(GS.pmet)
rm(GS.survival)
rm(GS.UV)
rm(GS.Vem)
MM
MS_lscore = MS.lscore
MS_pmet = MS_pmet
MS_pmet = MS.pmet
MS_survival = MS.survival
MS_UV = MS.UV
METree_GO$labels
MS_lscore_bar = MS.lscore.bar
MS_pmet_bar = MS.pmet.bar
MS_survival_bar = MS_survival_bar
MS_survival_bar = MS.survival.bar
MS_UV_bar = MS.UV.bar
MS_Vem_bar = MS.Vem.bar
shiny::runApp('inst/Shiny/CVE_WGCNA_melanoma')
shiny::runApp('inst/Shiny/CVE_WGCNA_melanoma')
openCVE(oncotator_example,"test","WGCNAmelanoma")
par(mfrow=c(1,2))
par(mar=c(8,0,0,0))
a = ape::plot.phylo(ape::as.phylo(METree_GO), font=1, cex=0.90)
plot(0.5,1, xlim=c(0,10),ylim=c(1,42),axes=FALSE, xlab="")
text(x=0, y=c(1:42), labels  = c(0:41)[label_order][METree_GO$order], xpd=TRUE)
mtext("module number", las=2, side=1, at=0)
points(rep(0.5,42),c(1:42),xpd=TRUE,pch=15, cex=1.8,
col=c(WGCNA::labels2colors(c(0:41)))[label_order][METree_GO$order])
mtext("module colour", las=2, side=1, at=0.5)
text(x=1, y=c(1:42), labels  = topgenes_per_module[label_order][METree_GO$order], xpd=TRUE)
mtext("# variants", las=2, side=1, at=1)
lscore_rectangles = cbind(as.numeric(c(MS_lscore_bar[label_order][METree_GO$order]/5)),rep(0.7,42))
symbols(1.5+as.numeric(c(MS_lscore_bar[label_order][METree_GO$order]/5))/2,c(1:42),
rectangles = lscore_rectangles,add=TRUE, xpd=TRUE,inches = FALSE, adj=1, fg="green3", bg="green3",lwd=2)
mtext("lymphocyte score",las=2,side = 1, at = 1.5)
pmet_rectangles = cbind(as.numeric(c(MS_pmet_bar[label_order][METree_GO$order]/5)),rep(0.7,42))
symbols(3+as.numeric(c(MS_pmet_bar[label_order][METree_GO$order]/5))/2,c(1:42),
rectangles = pmet_rectangles,add=TRUE, xpd=TRUE,inches = FALSE, adj=1, fg="red3", bg="red3",lwd=2)
mtext("primary vs met",las=2,side = 1, at = 3)
UV_rectangles = cbind(as.numeric(c(MS_UV_bar[label_order][METree_GO$order]/5)),rep(0.7,42))
symbols(4.5+as.numeric(c(MS_UV_bar[label_order][METree_GO$order]/5))/2,c(1:42),
rectangles = UV_rectangles,add=TRUE, xpd=TRUE,inches = FALSE, adj=1, fg="magenta", bg="magenta",lwd=2)
mtext("UV signature",las=2,side = 1, at = 4.5)
survival_rectangles = cbind(as.numeric(c(MS_survival_bar[label_order][METree_GO$order]/5)),rep(0.7,42))
symbols(6+as.numeric(c(MS_survival_bar[label_order][METree_GO$order]/5))/2,c(1:42),
rectangles = survival_rectangles,add=TRUE, xpd=TRUE,inches = FALSE, adj=1, fg="orange", bg="orange",lwd=2)
mtext("survival",las=2,side = 1, at = 6)
Vem_rectangles = cbind(as.numeric(c(MS_Vem_bar[label_order][METree_GO$order]/5)),rep(0.7,42))
symbols(7.5+as.numeric(c(MS_Vem_bar[label_order][METree_GO$order]/5))/2,c(1:42),
rectangles = Vem_rectangles,add=TRUE, xpd=TRUE,inches = FALSE, adj=1, fg="blue", bg="blue",lwd=2)
mtext("vemurafinib res",las=2,side = 1, at = 7.5)
rect(9, 5, 10, 5.7, add=TRUE, xpd=TRUE, col = "grey", border="grey")
text(labels="0",x=9,y=6.4); text(labels="5",x=10,y=6.4); text(labels = "p-value",x = 9.5,y =  4); text(labels = "(-log10)", x=9.5, y=3)
rect(8.75, 2, 10.25, 8, add=TRUE)
topgenes=pcv[[input$sample]]$Hugo_Symbol[f]
module = as.numeric(input$module)
if(input$measure==1){
measure_col = "green3"
GS = GS_lscore
}
measure_col = "green3"
GS = GS_lscore
par(mar=c(5,4,1,1))
plot(-log10(GS[modules==module,1]), MM[modules==module,module+1], xlab="p-value (-log10)",
ylab="module membership", pch=20, bty="n",
cex=(GS[modules==module,4]/max(GS[modules==module,4],na.rm=TRUE))*4,
xlim=c(0,max(-log10(GS[modules==module,1]),na.rm=TRUE)+1.2),
ylim=c(0,9.758229e-01), col="darkgrey")
GS
plot(-log10(GS[modules==module,1]), MM[modules==module,module+1], xlab="p-value (-log10)",
ylab="module membership", pch=20, bty="n",
cex=(GS[modules==module,4]/max(GS[modules==module,4],na.rm=TRUE))*4,
xlim=c(0,max(-log10(GS[modules==module,1]),na.rm=TRUE)+1.2),
ylim=c(0,9.758229e-01), col="darkgrey")
-log10(GS[modules==module,1])
modules
modules
module = 4
plot(-log10(GS[modules==module,1]), MM[modules==module,module+1], xlab="p-value (-log10)",
ylab="module membership", pch=20, bty="n",
cex=(GS[modules==module,4]/max(GS[modules==module,4],na.rm=TRUE))*4,
xlim=c(0,max(-log10(GS[modules==module,1]),na.rm=TRUE)+1.2),
ylim=c(0,9.758229e-01), col="darkgrey")
box(lty=1, col=measure_col, lwd=4)
if(sum(genes_WGCNA[modules==module] %in% topgenes)>0){
text(-log10(GS[modules==module,1])[genes_WGCNA[modules==module] %in% topgenes],
MM[modules==module,module+1][genes_WGCNA[modules==module] %in% topgenes],
labels=genes_WGCNA[modules==module][genes_WGCNA[modules==module] %in% topgenes],
cex=1.3, pos=4, col=measure.col)
}
if(sum(genes_WGCNA[modules==module] %in% topgenes)>0){
text(-log10(GS[modules==module,1])[genes_WGCNA[modules==module] %in% topgenes],
MM[modules==module,module+1][genes_WGCNA[modules==module] %in% topgenes],
labels=genes_WGCNA[modules==module][genes_WGCNA[modules==module] %in% topgenes],
cex=1.3, pos=4, col=measure_col)
}
points(-log10(GS[modules==module,1][genes_WGCNA[modules==module] %in% topgenes]),
MM[modules==module,module+1][genes_WGCNA[modules==module] %in% topgenes],
pch=20, bty="n",
cex=((GS[modules==module,4]/max(GS[modules==module,4],na.rm=TRUE))*4)[
genes_WGCNA[modules==module] %in% topgenes],col=measure_col)
if(input$names==1){
text(-log10(GS[modules==module,1]), MM[modules==module,module+1],
labels=genes_WGCNA[modules==module],cex=.8, pos=4)
}
shiny::runApp('inst/Shiny/CVE_WGCNA_melanoma')
points(-log10(GS[modules==module,1][genes_WGCNA[modules==module] %in% topgenes]),
MM[modules==module,module+1][genes_WGCNA[modules==module] %in% topgenes],
pch=20, bty="n",
cex=((GS[modules==module,4]/max(GS[modules==module,4],na.rm=TRUE))*4)[
genes_WGCNA[modules==module] %in% topgenes],col=measure_col)
text(-log10(GS[modules==module,1]), MM[modules==module,module+1],
labels=genes_WGCNA[modules==module],cex=.8, pos=4)
abline(v=-log10(0.05),lty=2,col="darkgrey",lwd=2)
openCVE(oncotator_example,"test","WGCNAmelanoma")
shiny::runApp('inst/Shiny/CVE_WGCNA_melanoma')
shiny::runApp('inst/Shiny/CVE_WGCNA_melanoma')
shiny::runApp('inst/Shiny/CVE_WGCNA_melanoma')
shiny::runApp('inst/Shiny/CVE_WGCNA_melanoma')
shiny::runApp('inst/Shiny/CVE_WGCNA_melanoma')
shiny::runApp('inst/Shiny/CVE_WGCNA_melanoma')
plot(0.5,1, xlim=c(0,10),ylim=c(1,42),axes=FALSE, xlab="")
text(x=0, y=c(1:42), labels  = c(0:41)[label_order][METree_GO$order], xpd=TRUE)
mtext("module number", las=2, side=1, at=0)
points(rep(0.5,42),c(1:42),xpd=TRUE,pch=15, cex=1.8,
col=c(WGCNA::labels2colors(c(0:41)))[label_order][METree_GO$order])
mtext("module colour", las=2, side=1, at=0.5)
text(x=1, y=c(1:42), labels  = topgenes_per_module[label_order][METree_GO$order], xpd=TRUE)
mtext("# variants", las=2, side=1, at=1)
lscore_rectangles = cbind(as.numeric(c(MS_lscore_bar[label_order][METree_GO$order]/5)),rep(0.7,42))
symbols(1.5+as.numeric(c(MS_lscore_bar[label_order][METree_GO$order]/5))/2,c(1:42),
rectangles = lscore_rectangles,add=TRUE, xpd=TRUE,inches = FALSE, adj=1, fg="green3", bg="green3",lwd=2)
mtext("lymphocyte score",las=2,side = 1, at = 1.5)
pmet_rectangles = cbind(as.numeric(c(MS_pmet_bar[label_order][METree_GO$order]/5)),rep(0.7,42))
symbols(3+as.numeric(c(MS_pmet_bar[label_order][METree_GO$order]/5))/2,c(1:42),
rectangles = pmet_rectangles,add=TRUE, xpd=TRUE,inches = FALSE, adj=1, fg="red3", bg="red3",lwd=2)
mtext("primary vs met",las=2,side = 1, at = 3)
UV_rectangles = cbind(as.numeric(c(MS_UV_bar[label_order][METree_GO$order]/5)),rep(0.7,42))
symbols(4.5+as.numeric(c(MS_UV_bar[label_order][METree_GO$order]/5))/2,c(1:42),
symbols(6+as.numeric(c(MS_survival_bar[label_order][METree_GO$order]/5))/2,c(1:42),
rectangles = survival_rectangles,add=FALSE, xpd=TRUE,inches = FALSE, adj=1, fg="orange", bg="orange",lwd=2)
symbols(6+as.numeric(c(MS_survival_bar[label_order][METree_GO$order]/5))/2,c(1:42),
rectangles = survival_rectangles,add=FALSE, xpd=TRUE,inches = FALSE, adj=1, fg="orange", bg="orange",lwd=2)
save(GS_lscore, GS_pmet, GS_survival, GS_UV, GS_Vem, MM, MS_lscore, MS_pmet, MS_survival, MS_UV, label_order, METree_GO, modules, MS_lscore_bar, MS_pmet_bar, MS_survival_bar, MS_UV_bar, MS_Vem_bar,file="WGCNAmelanoma_extension.Rdata")
save(GS_lscore, GS_pmet, GS_survival, GS_UV, GS_Vem, MM, MS_lscore, MS_pmet, MS_survival, MS_UV, label_order, METree_GO, modules, MS_lscore_bar, MS_pmet_bar, MS_survival_bar, MS_UV_bar, MS_Vem_bar,file="data/WGCNAmelanoma_extension.Rdata")
save(GS_lscore, GS_pmet, GS_survival, GS_UV, GS_Vem, MM, MS_lscore, MS_pmet, MS_survival, MS_UV, label_order, METree_GO, modules, MS_lscore_bar, MS_pmet_bar, MS_survival_bar, MS_UV_bar, MS_Vem_bar, genes_WGCNA,file="data/WGCNAmelanoma_extension.Rdata")
head(oncotator_example)
oncotator_example[1:6;1:5]
oncotator_example[1:6,1:5]
oncotator_example[1:6,1:8]
load("~/Documents/Manuscripts/10) CVE paper/CVE/data/RNAseq.rda")
load("../RNAseq.rda")
load("RNAseq.rda")
load("RNAseq.rda")
load("RNAseq.rda")
load("~/Documents/Manuscripts/10) CVE paper/supplements/WGCNA tutorial/RNAseq.rda")
load("~/Documents/Manuscripts/10) CVE paper/supplements/WGCNA tutorial/clinical.rda")
clinical[1:5,1:5]
expmat2 = RNAseq[match(clinical$Name, rownames(expmat)),]
RNAseq[1:5,1:4]
RNAseq = RNAseq[apply(RNAseq,1,function(x) sum(x==0))<ncol(RNAseq)*0.8,]
clinical[1:5,1:6]
RNAseq_voom = limma::voom(RNAseq)$E
WGCNA_matrix = t(RNAseq_voom[order(apply(RNAseq_voom,1,mad), decreasing = T)[1:5000],])
s = abs(WGCNA::bicor(WGCNA_matrix))
require(WGCNA)
powers = c(c(1:10), seq(from = 12, to=20, by=2))
sft = pickSoftThreshold(WGCNA_matrix, powerVector = powers, verbose = 5)
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",
type="n", main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=1,col="red"); abline(h=0.90,col="red")
beta = 3
a = s^beta
w = 1-a
geneTree = hclust(as.dist(w), method = "average")
modules = cutreeDynamic(dendro = geneTree, distM = w, deepSplit = 4, pamRespectsDendro = FALSE,
module.colours = labels2colors(modules)
plotDendroAndColors(geneTree, module.colours, "Module colours", dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05, main="")
require(WGCNA)
geneTree = hclust(as.dist(w), method = "average")
modules = cutreeDynamic(dendro = geneTree, distM = w, deepSplit = 4, pamRespectsDendro = FALSE,
minClusterSize = 30)
module.colours = labels2colors(modules)
plotDendroAndColors(geneTree, module.colours, "Module colours", dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05, main="")
library(phytools)
MEs = moduleEigengenes(WGCNA_matrix, colors = module.colours, excludeGrey = FALSE)$eigengenes
MEDiss = 1-cor(MEs);
METree = hclust(as.dist(MEDiss), method = "average");
par(mar=c(2,2,2,2))
plot.phylo(as.phylo(METree),type = "fan",show.tip.label = FALSE, main="")
tiplabels(frame = "circle",col="black", text=rep("",length(unique(modules))), bg = levels(as.factor(module.colours)))
clinical[1:5,1:5]
clinical[clinical=="-"] = NA
WGCNA_matrix2 = WGCNA_matrix[match(clinical$Name, rownames(WGCNA_matrix)),]
dim(WGCNA_matrix)
dim(WGCNA_matrix2)
not.available = which(is.na(rownames(WGCNA_matrix2))==TRUE)
WGCNA_matrix2 = WGCNA_matrix2[-not.available,]
str(WGCNA_matrix2)
clinical = clinical[-not.available,]
lscore = as.numeric(clinical$LYMPHOCYTE.SCORE)
lscore[lscore<3] = 0
lscore[lscore>0] = 1
GS.lscore = t(sapply(1:ncol(WGCNA_matrix2),function(x)c(t.test(WGCNA_matrix2[,x]~lscore,var.equal=F)$p.value,
t.test(WGCNA_matrix2[,x]~lscore,var.equal=F)$estimate[1],
t.test(WGCNA_matrix2[,x]~lscore,var.equal=F)$estimate[2])))
devtools::load_all()
library("CVE", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
devtools::build()
devtools::document()
devtools::document()
library(CVE)
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
library(BiocCheck)
BiocCheck("CVE")
BiocCheck("../CVE/")
BiocCheck("../CVE")
devtools::document()
devtools::check("CVE")
devtools::check(CVE)
library(CVE)
openCVE
openCVE(oncotator_example, sample_names = "case study")
openCVE(oncotator_example, sample_names = "case study")
openCVE(oncotator_example, sample_names = "case study", extension = "WGCNAmelanoma")
devtools::build()
openCVE()
openCVE(oncotator_example)
openCVE(oncotator_example,"test")
oncotator_example
str(oncotator_example)
runCVE()
openCVE()
openCVE(oncotator_example,"test")
devtools::build()
openCVE(oncotator_example,"test")
library(CVE)
openCVE(oncotator_example,"test")
openCVE(oncotator_example,"case study")
devtools::build()
devtools::document()
devtools::build()
library(CVE)
openCVE(oncotator_example,"case study")
openCVE(oncotator_example,"case study",extension = "WGCNAmelanoma")
library(CVE)
library(CVE)
openCVE(oncotator_example,"sample")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocCheck")
?assign
library(CVE)
library(CVE)
library(CVE)
openCVE(oncotator_example,"test")
library(CVE)
openCVE(oncotator_example,"test")
load("~/Documents/Manuscripts/10) CVE paper/CVE/data/oncotator_example.RData")
save(oncotator_example, file="~/Documents/Manuscripts/10) CVE paper/CVE/data/oncotator_example.RData", compress = "xz")
load("~/Documents/Manuscripts/10) CVE paper/CVE/data/WGCNAmelanoma_extension.RData")
save.image(file="~/Documents/Manuscripts/10) CVE paper/CVE/data/WGCNAmelanoma_extension.RData", compress = "xz")
library(CVE)
library(CVE)
